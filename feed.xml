<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Kebot | Keith is Robot</title>
    <link href="http://kebot.me/feed.xml" rel="self" />
    
    <link href="http://kebot.me" />
    
    <updated>2012-06-03T20:31:43Z</updated>
    <id>http://kebot.me</id>
    <entry>
        <title type="html"><![CDATA[在 Mac 上部署 Nginx]]></title>
        <author><name>Kebot</name><uri>http://kebot.me</uri></author>
        <link href="http://kebot.me/2012/4/nginx-with-php-in-macosx/"/>
        <updated>2012-04-02T00:00:00Z</updated>
        <published>2012-04-02T00:00:00Z</published>
        <id>http://kebot.me/2012/4/nginx-with-php-in-macosx/</id>
        <content type="html" xml:base="http://kebot.me" xml:lang="en">
            <![CDATA[ <p>在MacOSX中, 本身就自带了 Apache 服务器, 安装调试 PHP 简直就是 0 配置, 而 nginx 作为一个高效的 web 服务器, 越来越多的应用在</p>

<p>本文中代码安装依赖 <code>homebrew</code></p>

<p>Homebrew中自带没有 php 的包, 所有与 php 相关的包都在 <a href="https://github.com/josegonzalez/homebrew-php">HomeBrew PHP</a> 里面,所以要先运行:</p>

<p><code>brew tap josegonzalez/homebrew-php</code></p>

<p>然后再运行:</p>

<p><code>brew info php</code></p>

<p>查看php的介绍, <code>brew options php</code>, 查看得知需要 <code>--with-cgi</code> 参数.</p>

<p><code>brew install php --devel --with-cgi --with-mysql</code></p>

<hr>

<p>Install hudbt</p>

<p>memcached-php</p>

<pre><code>`pear install memcache`</code></pre>

<p>** TODOLIST **</p>

<h1>Python</h1>

<p>再战 virtualenv &amp;&amp; virtualenvwrapper</p>

<p>uWsgi with Nginx</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[About JavaScript: Ender, Coffee and More]]></title>
        <author><name>Kebot</name><uri>http://kebot.me</uri></author>
        <link href="http://kebot.me/2012/4/ender/"/>
        <updated>2012-04-01T00:00:00Z</updated>
        <published>2012-04-01T00:00:00Z</published>
        <id>http://kebot.me/2012/4/ender/</id>
        <category scheme="http://kebot.me/tag/javascript/" term="JavaScript" label="Javascript" />
        <category scheme="http://kebot.me/tag/coffeescript/" term="CoffeeScript" label="Coffeescript" />
        <content type="html" xml:base="http://kebot.me" xml:lang="en">
            <![CDATA[ <p>写过<code>Python</code>之后觉得，对一门好的语言来说，一个好的包管理器是非常重要的。</p>

<p><code>JavaScript</code> 发展正旺，而这是一门现在的程序员或多或少会接触的语言，用过<code>Python</code>之后再回来用 <code>JavaScript</code> 有很多不尽如人意的地方.</p>

<h4>语法</h4>

<p>JavaScript 有些不尽如人意的地方, <a href="http://coffeescript.org/" title="CoffeeScript">CoffeeScript</a> 的出现, Coffee就是Java, 所以 CoffeeScript本身就是JavaScript,除了语法,其他的都相同,所以没什么学习门槛和迁移成本</p>

<p><a href="http://coffeescript.org/" title="CoffeeScript">CoffeeScript</a> 借鉴了很多 <code>Ruby</code> 和 <code>Python</code> 的优点, 同时保留了JavaScript的特点,让 JavaScript写起来更舒心了.出了缩进的语法外,增加的 <code>class</code> 功能让 JavaScript的类定义显得优雅了不少.</p>

<p>下面是示例代码:</p>

<pre><code>class CoffeeScript extends JavaScript
    constructor: (@name)-&gt;
        console.log &#39;Hello #{name}&#39;</code></pre>

<p>具体按照使用的教程参见官网 ( @TODO add links here )</p>

<h4>包管理</h4>

<p>对于一门语言来说,一个统一的包管理工具非常重要,这样子,安装依赖,利用别人的劳动成果都非常方便, 写代码现在已经是一个叠积木的过程, 利用前人的劳动成果是必然的.</p>

<p>对于JavaScript来说, 已经存在这样的工具了, 那就是 <code>npm</code>, 不过作为<code>node.js</code>的包管理工具, 用来管理浏览器的JavaScript更显得麻烦, 我一直企图在CoffeeScript里面用 <code>import</code> 语句, 想导入一个模块文件来.</p>

<p>对于浏览器来说,开发人员一直用在html里面依次加载js文件的方式导入js库,为了让开发人员更方便,很多js库做得越来越臃肿, 比如jquery, 包含了你所想用的大部分功能, 其实在一个小的网页里, 你能用到的功能是很少的.</p>

<p>比如想得到jQuery库的功能, 可以这样:</p>

<p><code>ender build jeesh reqwest</code></p>

<p>各个库都可以单独拿出来用, 也可以和 <code>$</code> 命令结合. 在浏览器端, 终于可以用 require 语句了.</p>

<p><code>ender build underscore</code></p>

<pre><code>_ = require &#39;underscore&#39;
_({a: &#39;b&#39;}).each (a, b)-&gt;
    console a, b</code></pre>

<p>一切看起来这么优雅, 不是嘛?</p>

<h4>结论</h4>

<p>这些工具都是出自 <code>node.js</code> 社区, 所有的依赖需要 <code>Linux / Mac</code> ,Windows下面我没跑过, 估计想跑也不是什么容易的事情.</p>

<p>对于普通程序员来说, 这些东西还是略显得麻烦了, 要普及的话需要降低使用门槛, 不过生命在于折腾, 现在这么多工具的出现是为了更方便地写出代码, 正因为大家都这么折腾, 程序的世界才显得那么有趣.</p>

<h4>TIPS</h4>

<ul>
<li>npm 在国内访问速度过慢, 可以增加镜像访问:<a href="http://nodeblog.org/post/4ec36ebf363fd5e364000001">http://nodeblog.org/post/4ec36ebf363fd5e364000001</a></li>
</ul>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sass and Compass]]></title>
        <author><name>Kebot</name><uri>http://kebot.me</uri></author>
        <link href="http://kebot.me/2012/2/compass/"/>
        <updated>2012-02-13T00:00:00Z</updated>
        <published>2012-02-13T00:00:00Z</published>
        <id>http://kebot.me/2012/2/compass/</id>
        <content type="html" xml:base="http://kebot.me" xml:lang="en">
            <![CDATA[ <p>Compass</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[All about 2011]]></title>
        <author><name>Kebot</name><uri>http://kebot.me</uri></author>
        <link href="http://kebot.me/2012/1/2011/"/>
        <updated>2012-01-08T00:00:00Z</updated>
        <published>2012-01-08T00:00:00Z</published>
        <id>http://kebot.me/2012/1/2011/</id>
        <category scheme="http://kebot.me/tag/life/" term="life" label="Life" />
        <category scheme="http://kebot.me/tag/2011/" term="2011" label="2011" />
        <content type="html" xml:base="http://kebot.me" xml:lang="en">
            <![CDATA[ <p>2011 , 农历辛卯年,也称为兔年.</p>

<p>每段岁月,给它取名,让它过去,但也要留点记忆</p>

<p>公元2010年,称为&quot;漉&quot;,取,忙碌,湿漉漉</p>

<p>2011年,是&quot;漉&quot;的第二年</p>

<p>这一年我22周岁,我不是特别忙碌,但下体一般是湿漉漉的.</p>

<p>没有写诗
    因为没有情绪
谈了一次恋爱
    还是处男</p>

<p>三月前记不清了
四月去了趟武汉,五月去了北京
七月到了四川,然后我奔向北京
在北京呆了两个月,九月回杭州
十月份骑车环了一次太湖
十一月可能去了一次千岛湖,是宅着的
年末在南京</p>

<p>大部分的生活都围绕着音乐,代码和骑行展开.有点单调,但也很cool</p>

<p>看了几百部电影,十几本书可能,听了几十张专辑吧</p>

<p>新认识了几十个朋友,淡忘了很多老朋友.</p>

<p>越到后来,对于这个世界,我还是在一步步的试错</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blog move to liquidluck]]></title>
        <author><name>Kebot</name><uri>http://kebot.me</uri></author>
        <link href="http://kebot.me/2011/12/again/"/>
        <updated>2011-12-07T00:00:00Z</updated>
        <published>2011-12-07T00:00:00Z</published>
        <id>http://kebot.me/2011/12/again/</id>
        <category scheme="http://kebot.me/tag/date/" term="date" label="Date" />
        <content type="html" xml:base="http://kebot.me" xml:lang="en">
            <![CDATA[ <p><a href="&#x27;http://github.com/lepture/liquidluck&#x27;">LiquidLuck</a> is a static blog
generator.</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文件保存时自动刷新浏览器 F5 For Mac and VIM]]></title>
        <author><name>Kebot</name><uri>http://kebot.me</uri></author>
        <link href="http://kebot.me/2011/9/live-reloader/"/>
        <updated>2011-09-15T00:00:00Z</updated>
        <published>2011-09-15T00:00:00Z</published>
        <id>http://kebot.me/2011/9/live-reloader/</id>
        <content type="html" xml:base="http://kebot.me" xml:lang="en">
            <![CDATA[ <p>最近发现 <a href="http://www.getf5.com/">F5</a>这个插件很火,于是去看了下简介,其实就是检测一个文件夹里面的文件改动,然后自动刷新浏览器,不过看上去只支持windows. 因为我一直在用 VIM , 于是就写了几行代码实现了 &ldquo;保存文件自动刷新这个功能&rdquo; 不过,首先,必须确保你的机器是Mac和GoogleChrome浏览器 为了让代码更加Python一点,于是我用了appscript这个python库,所以要先运行下这行代码 
<pre lang="bash"> 
easy_install appscript </p>

<h1>或者</h1>

<p>pip install appscript 
</pre></p>

<p>然后将下面这些话加入你的 .vimrc 
<pre lang="python"> 
autocmd BufWritePost <em>.coffee,</em>.css,*.html :call Refresh_Chrome()</p>

<p>function! Refresh_Chrome()
python &lt;&lt; EOF
import appscript
appscript.app(&quot;Google Chrome&quot;).windows[0].active_tab.reload()
EOF
endfunction</p>

<p></pre>
======================================================================== 现在已经够用了,以后可以考虑写一个python脚本来监测文件夹的改动并刷新浏览器</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[< V for Lyrics > GiTuns+DynamicLyrics 改名]]></title>
        <author><name>Kebot</name><uri>http://kebot.me</uri></author>
        <link href="http://kebot.me/2011/8/v-for-lyrics-gitunsdynamiclyrics-%e6%94%b9%e5%90%8d/"/>
        <updated>2011-08-14T00:00:00Z</updated>
        <published>2011-08-14T00:00:00Z</published>
        <id>http://kebot.me/2011/8/v-for-lyrics-gitunsdynamiclyrics-%e6%94%b9%e5%90%8d/</id>
        <content type="html" xml:base="http://kebot.me" xml:lang="en">
            <![CDATA[ <p>出场人物:
<a href="http://blog.4321.la/">Martian</a> 是 Dynamic Lyrics 的作者 </p>

<p>在我的死缠烂打 , 或者威逼利诱之下 ,他决定和我合作了 , 一起写mac下面歌词的软件&hellip;</p>

<p>最近大连人民很英勇,小白 看着图片突然想起来 V for Vendetta,决定向它致敬,于是和小白商量了下各个语种 &#39;歌词&#39; 怎么写,最后发现很多语言都是 &#39;lyric&#39; 于是就决定取名 V for Lyrics &hellip;</p>

<p>然后更多的东西,只能敬请期待了~</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用VIM 写 CoffeeScript , 并实现时时编译]]></title>
        <author><name>Kebot</name><uri>http://kebot.me</uri></author>
        <link href="http://kebot.me/2011/7/vim-coffeescript/"/>
        <updated>2011-07-15T00:00:00Z</updated>
        <published>2011-07-15T00:00:00Z</published>
        <id>http://kebot.me/2011/7/vim-coffeescript/</id>
        <content type="html" xml:base="http://kebot.me" xml:lang="en">
            <![CDATA[ <h1>神马是CoffeeScript</h1>

<p><a href="http://jashkenas.github.com/coffee-script/">Coffee Script</a> 就是 JavaScript 但它比 JavaScript 有更好的语法,更简介的代码,更规范的编码规范,它留下了JavaScript 好的部分,去掉了不好的部分.</p>

<p>这是CoffeeScript的介绍页面:<a href="http://jashkenas.github.com/coffee-script/">http://jashkenas.github.com/coffee-script/</a></p>

<p>你可以用TRY COFFEESCRIPT尝试写一些script,然后程序会时时显示转换后的javascript代码.</p>

<h1>用VIM写CoffeeScript</h1>

<p>但我是用VIM写的代码,VIM需要一些配置,索幸,有人已经写了VIM的coffee script插件,地址在这里:<a href="https://github.com/kchmck/vim-coffee-script">https://github.com/kchmck/vim-coffee-script</a></p>

<p>下面以Mac为例介绍下VIM配置CoffeeScript开发环境:</p>

<pre lang="bash">
# 安装node.js
brew install node.js
# 安装npm
# 安装coffee-script
npm install -g coffee-script
# 安装 [pathogen](http://www.vim.org/scripts/script.php?script_id=2332)
cd ~/.vim/bundle
git clone git://github.com/kchmck/vim-coffee-script.git
# 打开 ~/.vimrc 加下面一行,可以实现保存时候自动编译成js文件
autocmd BufWritePost *.coffee silent CoffeeMake! -b | cwindow
# 我写成这样保存时可以实时看到编译结果
autocmd BufWritePost *.coffee silent CoffeeCompile | CoffeeMake! -b | cwindow
</pre>

<p>接着随便打开.coffee文件,写一点代码,保存的时候vim会自动生成 .js 文件</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用Commandline-Cocoa在命令行中快速调试Objective-C/Cocoa代码]]></title>
        <author><name>Kebot</name><uri>http://kebot.me</uri></author>
        <link href="http://kebot.me/2011/6/commandline-cocoa/"/>
        <updated>2011-06-28T00:00:00Z</updated>
        <published>2011-06-28T00:00:00Z</published>
        <id>http://kebot.me/2011/6/commandline-cocoa/</id>
        <content type="html" xml:base="http://kebot.me" xml:lang="en">
            <![CDATA[ <p>学习一门语言是一个不断试错的过程,对于我来说,脚本语言的方便之处是可以快速地运行,调试&hellip; PHP,Python,JavaScript&hellip;这些脚本语言都可以不借助第三方工具,快速进行调试&hellip;</p>
<p> </p>
<hr />
<p>有时候你只想测试一段小小的代码片断 &ndash; 或许是看看 NSDateFormatter 在不同情况下的输出,测试一些文本替换的方法(testing out some text replacement routine),或者是测试下画图</p>
<p> </p>
<p>对于Objective-C的学习来说,每次想试验一个小功能,或者运行一段小代码,都需要新建一个XCode Project 然后导入相应的Framework来进行Simple test,这是经常的事,这是&quot;我&quot;(指作者)为什么我把这些 shell script 整理出来让你在终端运行Cocoa代码.</p>
<pre lang="sh">$ runcocoa 'NSDateFormatter *formatter = [[[NSDateFormatter alloc] init] autorelease]; [formatter setDateFormat:@"d MMM, h:mm a"]; NSLog(@"%@", [formatter stringFromDate:[NSDate date]]);'

2011-02-23 20:02:10.313 runcocoa-output[28025:903] 23 Feb, 8:02 PM
</pre>
<p>你可以直接从命令行完全访问各种Cocoa资源库,还有在iOS模式,你也可以访问iOS的部分.</p>
<p>更新:现在可以在 [Github 中找到这个项目](https://github.com/michaeltyson/Commandline-Cocoa)</p>
<p>你可以把代码当做命令行参数, 也可以使用标准输入输出,所以你可以用管道.这对TextMate 使用者非常方便: 打一些代码,然后输入 ** Cmd-Option-R ** ,输入 &lsquo;runcocoa&rsquo; , 回车,然后就能看到结果了.</p>
<p>明白了?</p>
<p>你也引入别的framework (比如:使用 ** -include AudioToolbox/AudioToolbox.h -framework AudioToolbox ** 作为命令行参数),然后用gdb模式运行代码(带上 -gdb 参数).</p>
<p>你也可以给命令加上 -ios 参数来运行iOS代码,试试这个:</p>
<pre lang="sh">runcocoa -ios 'UIGraphicsBeginImageContext(CGSizeMake(100,100)); CGContextRef ctx = UIGraphicsGetCurrentContext(); CGContextSetFillColorWithColor(ctx,[[UIColor whiteColor] CGColor]); CGContextBeginPath(ctx); CGContextMoveToPoint(ctx, 50, 0); CGContextAddArc(ctx, 50, 50, 50, M_PI/2.0, M_PI/2.0 + (2*M_PI), 0); CGContextFillPath(ctx); UIImage *icon = [UIImage imageWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:@"http://atastypixel.com/favicon.ico"]]]; [icon drawAtPoint:CGPointMake((100-[icon size].width)/2.0,(100-[icon size].height)/2.0)]; UIImage *i = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); [UIImagePNGRepresentation(i) writeToFile:@"output.png" atomically:NO];'; open output.png;
</pre>
[原文链接](http://atastypixel.com/blog/objective-c-cocoa-on-the-command-line/)
<p><a href="http://atastypixel.com/blog/objective-c-cocoa-on-the-command-line/">http://atastypixel.com/blog/objective-c-cocoa-on-the-command-line/</a></p>
<p> </p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GiTuns in Mac App Store Status:Rejected.第一次被拒]]></title>
        <author><name>Kebot</name><uri>http://kebot.me</uri></author>
        <link href="http://kebot.me/2011/3/gituns-in-mac-app-store-statusrejected/"/>
        <updated>2011-03-19T00:00:00Z</updated>
        <published>2011-03-19T00:00:00Z</published>
        <id>http://kebot.me/2011/3/gituns-in-mac-app-store-statusrejected/</id>
        <content type="html" xml:base="http://kebot.me" xml:lang="en">
            <![CDATA[ <p><em>事情总不是进展那么顺利. GiTuns被App Store拒绝了</em></p>

<p>原因有二:
2.3 Apps that do not perform as advertised by the developer will be rejected
2.21 Apps may not use update mechanisms outside of the App Store</p>

<p>主要是2.3:</p>

<blockquote>
Apple said this:

Words Darker Than Their Wings.mp3 by Alter Bridge
City Of Night.mp3 by Bruce Springsteen
Respect Yourself.mp3 by Huey Lewis And The News
Honest Face.mp3 by Liam Finn + Eliza Jane
O Christmas Tree - Album Version by VeggieTales (Veggie Tunes)

Searched each song via both search machines. No lyrics found.

</blockquote>

<p>Will add some Engine that support more English song.</p>
 ]]>
        </content>
    </entry>
    </feed>