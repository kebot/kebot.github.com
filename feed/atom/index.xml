<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">Kebot</title>
  <subtitle type="text">Keith is Robot</subtitle>

  <updated>2011-11-27T12:28:57Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://kebot.me/" />
  <id>http://kebot.me//feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://kebot.me//feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://kebot.me/</uri>
    </author>
    <title type="html"><![CDATA[文件保存时自动刷新浏览器 F5 For Mac and VIM]]></title>
    <link rel="alternate" type="text/html" href="http://kebot.me/2011/09/%e6%96%87%e4%bb%b6%e4%bf%9d%e5%ad%98%e6%97%b6%e8%87%aa%e5%8a%a8%e5%88%b7%e6%96%b0%e6%b5%8f%e8%a7%88%e5%99%a8-f5-for-mac-and-vim/" />
    <id>http://kebot.me/2011/09/%e6%96%87%e4%bb%b6%e4%bf%9d%e5%ad%98%e6%97%b6%e8%87%aa%e5%8a%a8%e5%88%b7%e6%96%b0%e6%b5%8f%e8%a7%88%e5%99%a8-f5-for-mac-and-vim/</id>
    <updated>2011-09-15T19:08:47Z</updated>
    <published>2011-09-15T19:08:47Z</published>
    <category scheme="http://kebot.me/" term="Python" />
    <category scheme="http://kebot.me/" term="Mac" />
    <summary type="html"><![CDATA[文件保存时自动刷新浏览器 F5 For Mac and VIM]]></summary>
    <content type="html" xml:base="http://kebot.me/2011/09/%e6%96%87%e4%bb%b6%e4%bf%9d%e5%ad%98%e6%97%b6%e8%87%aa%e5%8a%a8%e5%88%b7%e6%96%b0%e6%b5%8f%e8%a7%88%e5%99%a8-f5-for-mac-and-vim/"><![CDATA[
最近发现 [F5](http://www.getf5.com/)这个插件很火,于是去看了下简介,其实就是检测一个文件夹里面的文件改动,然后自动刷新浏览器,不过看上去只支持windows. 因为我一直在用 VIM , 于是就写了几行代码实现了 "保存文件自动刷新这个功能" 不过,首先,必须确保你的机器是Mac和GoogleChrome浏览器 为了让代码更加Python一点,于是我用了appscript这个python库,所以要先运行下这行代码 
<pre lang="bash"> 
easy_install appscript 
# 或者 
pip install appscript 
</pre>

然后将下面这些话加入你的 .vimrc 
<pre lang="python"> 
autocmd BufWritePost *.coffee,*.css,*.html :call Refresh_Chrome()

function! Refresh_Chrome()
python << EOF
import appscript
appscript.app("Google Chrome").windows[0].active_tab.reload()
EOF
endfunction

</pre>
======================================================================== 现在已经够用了,以后可以考虑写一个python脚本来监测文件夹的改动并刷新浏览器]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://kebot.me/</uri>
    </author>
    <title type="html"><![CDATA[< V for Lyrics > GiTuns+DynamicLyrics 改名]]></title>
    <link rel="alternate" type="text/html" href="http://kebot.me/2011/08/v-for-lyrics-gitunsdynamiclyrics-%e6%94%b9%e5%90%8d/" />
    <id>http://kebot.me/2011/08/v-for-lyrics-gitunsdynamiclyrics-%e6%94%b9%e5%90%8d/</id>
    <updated>2011-08-14T17:02:16Z</updated>
    <published>2011-08-14T17:02:16Z</published>
    <category scheme="http://kebot.me/" term="Others" />
    <summary type="html"><![CDATA[< V for Lyrics > GiTuns+DynamicLyrics 改名]]></summary>
    <content type="html" xml:base="http://kebot.me/2011/08/v-for-lyrics-gitunsdynamiclyrics-%e6%94%b9%e5%90%8d/"><![CDATA[
出场人物:
[Martian](http://blog.4321.la/) 是 Dynamic Lyrics 的作者 


在我的死缠烂打 , 或者威逼利诱之下 ,他决定和我合作了 , 一起写mac下面歌词的软件...

最近大连人民很英勇,小白 看着图片突然想起来 V for Vendetta,决定向它致敬,于是和小白商量了下各个语种 '歌词' 怎么写,最后发现很多语言都是 'lyric' 于是就决定取名 V for Lyrics ...

然后更多的东西,只能敬请期待了~]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://kebot.me/</uri>
    </author>
    <title type="html"><![CDATA[用VIM 写 CoffeeScript , 并实现时时编译]]></title>
    <link rel="alternate" type="text/html" href="http://kebot.me/2011/07/vim-coffeescript/" />
    <id>http://kebot.me/2011/07/vim-coffeescript/</id>
    <updated>2011-07-15T21:15:59Z</updated>
    <published>2011-07-15T21:15:59Z</published>
    <category scheme="http://kebot.me/" term="Front" />
    <category scheme="http://kebot.me/" term="JS" />
    <summary type="html"><![CDATA[用VIM 写 CoffeeScript , 并实现时时编译]]></summary>
    <content type="html" xml:base="http://kebot.me/2011/07/vim-coffeescript/"><![CDATA[
神马是CoffeeScript
=====================
[Coffee Script](http://jashkenas.github.com/coffee-script/) 就是 JavaScript 但它比 JavaScript 有更好的语法,更简介的代码,更规范的编码规范,它留下了JavaScript 好的部分,去掉了不好的部分.

这是CoffeeScript的介绍页面:[http://jashkenas.github.com/coffee-script/](http://jashkenas.github.com/coffee-script/)

你可以用TRY COFFEESCRIPT尝试写一些script,然后程序会时时显示转换后的javascript代码.

用VIM写CoffeeScript
======================
但我是用VIM写的代码,VIM需要一些配置,索幸,有人已经写了VIM的coffee script插件,地址在这里:[https://github.com/kchmck/vim-coffee-script](https://github.com/kchmck/vim-coffee-script)

下面以Mac为例介绍下VIM配置CoffeeScript开发环境:

<pre lang="bash">
# 安装node.js
brew install node.js
# 安装npm
# 安装coffee-script
npm install -g coffee-script
# 安装 [pathogen](http://www.vim.org/scripts/script.php?script_id=2332)
cd ~/.vim/bundle
git clone git://github.com/kchmck/vim-coffee-script.git
# 打开 ~/.vimrc 加下面一行,可以实现保存时候自动编译成js文件
autocmd BufWritePost *.coffee silent CoffeeMake! -b | cwindow
# 我写成这样保存时可以实时看到编译结果
autocmd BufWritePost *.coffee silent CoffeeCompile | CoffeeMake! -b | cwindow
</pre>

接着随便打开.coffee文件,写一点代码,保存的时候vim会自动生成 .js 文件]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://kebot.me/</uri>
    </author>
    <title type="html"><![CDATA[用Commandline-Cocoa在命令行中快速调试Objective-C/Cocoa代码]]></title>
    <link rel="alternate" type="text/html" href="http://kebot.me/2011/06/%e7%94%a8commandline-cocoa%e5%9c%a8%e5%91%bd%e4%bb%a4%e8%a1%8c%e4%b8%ad%e5%bf%ab%e9%80%9f%e8%b0%83%e8%af%95objective-ccocoa%e4%bb%a3%e7%a0%81/" />
    <id>http://kebot.me/2011/06/%e7%94%a8commandline-cocoa%e5%9c%a8%e5%91%bd%e4%bb%a4%e8%a1%8c%e4%b8%ad%e5%bf%ab%e9%80%9f%e8%b0%83%e8%af%95objective-ccocoa%e4%bb%a3%e7%a0%81/</id>
    <updated>2011-06-28T23:21:56Z</updated>
    <published>2011-06-28T23:21:56Z</published>
    <category scheme="http://kebot.me/" term="Mac" />
    <summary type="html"><![CDATA[用Commandline-Cocoa在命令行中快速调试Objective-C/Cocoa代码]]></summary>
    <content type="html" xml:base="http://kebot.me/2011/06/%e7%94%a8commandline-cocoa%e5%9c%a8%e5%91%bd%e4%bb%a4%e8%a1%8c%e4%b8%ad%e5%bf%ab%e9%80%9f%e8%b0%83%e8%af%95objective-ccocoa%e4%bb%a3%e7%a0%81/"><![CDATA[
<p>学习一门语言是一个不断试错的过程,对于我来说,脚本语言的方便之处是可以快速地运行,调试... PHP,Python,JavaScript...这些脚本语言都可以不借助第三方工具,快速进行调试...</p>
<p> </p>
<hr />
<p>有时候你只想测试一段小小的代码片断 -- 或许是看看 NSDateFormatter 在不同情况下的输出,测试一些文本替换的方法(testing out some text replacement routine),或者是测试下画图</p>
<p> </p>
<p>对于Objective-C的学习来说,每次想试验一个小功能,或者运行一段小代码,都需要新建一个XCode Project 然后导入相应的Framework来进行Simple test,这是经常的事,这是"我"(指作者)为什么我把这些 shell script 整理出来让你在终端运行Cocoa代码.</p>
<pre lang="sh">$ runcocoa 'NSDateFormatter *formatter = [[[NSDateFormatter alloc] init] autorelease]; [formatter setDateFormat:@"d MMM, h:mm a"]; NSLog(@"%@", [formatter stringFromDate:[NSDate date]]);'

2011-02-23 20:02:10.313 runcocoa-output[28025:903] 23 Feb, 8:02 PM
</pre>
<p>你可以直接从命令行完全访问各种Cocoa资源库,还有在iOS模式,你也可以访问iOS的部分.</p>
<p>更新:现在可以在 [Github 中找到这个项目](https://github.com/michaeltyson/Commandline-Cocoa)</p>
<p>你可以把代码当做命令行参数, 也可以使用标准输入输出,所以你可以用管道.这对TextMate 使用者非常方便: 打一些代码,然后输入 ** Cmd-Option-R ** ,输入 'runcocoa' , 回车,然后就能看到结果了.</p>
<p>明白了?</p>
<p>你也引入别的framework (比如:使用 ** -include AudioToolbox/AudioToolbox.h -framework AudioToolbox ** 作为命令行参数),然后用gdb模式运行代码(带上 -gdb 参数).</p>
<p>你也可以给命令加上 -ios 参数来运行iOS代码,试试这个:</p>
<pre lang="sh">runcocoa -ios 'UIGraphicsBeginImageContext(CGSizeMake(100,100)); CGContextRef ctx = UIGraphicsGetCurrentContext(); CGContextSetFillColorWithColor(ctx,[[UIColor whiteColor] CGColor]); CGContextBeginPath(ctx); CGContextMoveToPoint(ctx, 50, 0); CGContextAddArc(ctx, 50, 50, 50, M_PI/2.0, M_PI/2.0 + (2*M_PI), 0); CGContextFillPath(ctx); UIImage *icon = [UIImage imageWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:@"http://atastypixel.com/favicon.ico"]]]; [icon drawAtPoint:CGPointMake((100-[icon size].width)/2.0,(100-[icon size].height)/2.0)]; UIImage *i = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); [UIImagePNGRepresentation(i) writeToFile:@"output.png" atomically:NO];'; open output.png;
</pre>
[原文链接](http://atastypixel.com/blog/objective-c-cocoa-on-the-command-line/)
<p><a href="http://atastypixel.com/blog/objective-c-cocoa-on-the-command-line/">http://atastypixel.com/blog/objective-c-cocoa-on-the-command-line/</a></p>
<p> </p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://kebot.me/</uri>
    </author>
    <title type="html"><![CDATA[GiTuns New Version]]></title>
    <link rel="alternate" type="text/html" href="http://kebot.me/2011/04/%e6%96%b0%e7%95%8c%e9%9d%a2-%e5%8d%8a%e9%80%8f%e6%98%8e-%e7%aa%97%e5%8f%a3%e7%bd%ae%e9%a1%b6-gituns-%e6%9c%80%e6%96%b0%e5%bc%80%e5%8f%91%e7%89%88/" />
    <id>http://kebot.me/2011/04/%e6%96%b0%e7%95%8c%e9%9d%a2-%e5%8d%8a%e9%80%8f%e6%98%8e-%e7%aa%97%e5%8f%a3%e7%bd%ae%e9%a1%b6-gituns-%e6%9c%80%e6%96%b0%e5%bc%80%e5%8f%91%e7%89%88/</id>
    <updated>2011-04-25T14:40:22Z</updated>
    <published>2011-04-25T14:40:22Z</published>
    <category scheme="http://kebot.me/" term="Others" />
    <summary type="html"><![CDATA[GiTuns New Version]]></summary>
    <content type="html" xml:base="http://kebot.me/2011/04/%e6%96%b0%e7%95%8c%e9%9d%a2-%e5%8d%8a%e9%80%8f%e6%98%8e-%e7%aa%97%e5%8f%a3%e7%bd%ae%e9%a1%b6-gituns-%e6%9c%80%e6%96%b0%e5%bc%80%e5%8f%91%e7%89%88/"><![CDATA[
GiTuns

![GiTuns]( https://img.skitch.com/20110425-rfc6tp8g6d6sjqh69r2rgpdtbf.jpg)]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://kebot.me/</uri>
    </author>
    <title type="html"><![CDATA[GiTuns in Mac App Store Status:Rejected.第一次被拒]]></title>
    <link rel="alternate" type="text/html" href="http://kebot.me/2011/03/gituns-in-mac-app-store-statusrejected-%e7%ac%ac%e4%b8%80%e6%ac%a1%e8%a2%ab%e6%8b%92/" />
    <id>http://kebot.me/2011/03/gituns-in-mac-app-store-statusrejected-%e7%ac%ac%e4%b8%80%e6%ac%a1%e8%a2%ab%e6%8b%92/</id>
    <updated>2011-03-19T00:12:39Z</updated>
    <published>2011-03-19T00:12:39Z</published>
    <category scheme="http://kebot.me/" term="Others" />
    <summary type="html"><![CDATA[GiTuns in Mac App Store Status:Rejected.第一次被拒]]></summary>
    <content type="html" xml:base="http://kebot.me/2011/03/gituns-in-mac-app-store-statusrejected-%e7%ac%ac%e4%b8%80%e6%ac%a1%e8%a2%ab%e6%8b%92/"><![CDATA[
<em>事情总不是进展那么顺利. GiTuns被App Store拒绝了</em>

原因有二:
2.3 Apps that do not perform as advertised by the developer will be rejected
2.21 Apps may not use update mechanisms outside of the App Store

主要是2.3:

<blockquote>
Apple said this:

Words Darker Than Their Wings.mp3 by Alter Bridge
City Of Night.mp3 by Bruce Springsteen
Respect Yourself.mp3 by Huey Lewis And The News
Honest Face.mp3 by Liam Finn + Eliza Jane
O Christmas Tree - Album Version by VeggieTales (Veggie Tunes)

Searched each song via both search machines. No lyrics found.

</blockquote>

Will add some Engine that support more English song.]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://kebot.me/</uri>
    </author>
    <title type="html"><![CDATA[Disqus -- 新兴的评论系统]]></title>
    <link rel="alternate" type="text/html" href="http://kebot.me/2011/03/disqus-%e6%96%b0%e5%85%b4%e7%9a%84%e8%af%84%e8%ae%ba%e7%b3%bb%e7%bb%9f/" />
    <id>http://kebot.me/2011/03/disqus-%e6%96%b0%e5%85%b4%e7%9a%84%e8%af%84%e8%ae%ba%e7%b3%bb%e7%bb%9f/</id>
    <updated>2011-03-08T20:51:04Z</updated>
    <published>2011-03-08T20:51:04Z</published>
    <category scheme="http://kebot.me/" term="PHP" />
    <category scheme="http://kebot.me/" term="Wordpress" />
    <category scheme="http://kebot.me/" term="动手玩" />
    <summary type="html"><![CDATA[Disqus -- 新兴的评论系统]]></summary>
    <content type="html" xml:base="http://kebot.me/2011/03/disqus-%e6%96%b0%e5%85%b4%e7%9a%84%e8%af%84%e8%ae%ba%e7%b3%bb%e7%bb%9f/"><![CDATA[
不止一次在别人的评论系统里面看到了Disqus的身影~~

DISQUZ是一个管理站点评论的插件,它的方便之处在于,在这个社会化的时代,让你的博客和各种社会化网络连接,包括[Twitter](http://twitter.com/) , [Facebook](http://facebook.com/) , [Yahoo](http://yahoo.com/) 等社会化网络进行连接. 很方便地进行单点登陆 .

你可以在DISQUZ网站上管理你参与过的评论,你"喜欢"过的文章,回复别人的评论等等...确实方便了不少.

## What I want do? ##
既然提供了单点登陆,我联想起国内的众多服务,是不是可以用Disqus的API来实现:新浪/腾讯围脖,豆瓣,Gmail等进行登陆呢?

<未完>


[DISQUZ官方网站](http://disqus.com/)

[DISQUZ Wordpress Plugin](http://wordpress.org/extend/plugins/disqus-comment-system/)]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://kebot.me/</uri>
    </author>
    <title type="html"><![CDATA[Python Your Mac (1) - 概述]]></title>
    <link rel="alternate" type="text/html" href="http://kebot.me/2011/03/python-your-mac/" />
    <id>http://kebot.me/2011/03/python-your-mac/</id>
    <updated>2011-03-06T22:25:25Z</updated>
    <published>2011-03-06T22:25:25Z</published>
    <category scheme="http://kebot.me/" term="Others" />
    <summary type="html"><![CDATA[Python Your Mac (1) - 概述]]></summary>
    <content type="html" xml:base="http://kebot.me/2011/03/python-your-mac/"><![CDATA[
&gt; Python 是一门优雅的语言 , Mac 是一个优雅的系统~~

初学 Python , 就是在接触了一些很实用的小功能,小脚本开始的 . 比如我不想学习 AppleScript , 那么 , 学习Python吧~ AppleScript能做的事情,它都能做,而且能做得更好,这都得益于一个项目: **AppScript**

而用了这些方便的脚本,我才开始想,如何让更多的人(不会Python,不会命令行的普通用户)体验到Python带来的好处呢?
于是就找到了Py2App,可以把Python程序打包成Native Mac程序...

普通用户不会命令行操作,需要一个GUI界面~我选择了Tkinter~其他的跨平台GUI工具包Mac下可用的有 PyQT ~ wxPython需要另外装库,不适合一般用户~
于是,我的第一个作品:SyncYourITunes产生了,给iTunes嵌入歌词和豆瓣专辑封面的小程序~

但折腾远没有结束 , 一切都归功于 Tkinter实在是太难看了,于是我看中了Mac Native的界面包- Cocoa~

Cocoa是一个非常庞大的库,学习 Cocoa 基本上是等于学习了Objective-C语言本身, Cocoa的母体语言是OC , 同时还提供了Java的绑定,也有一些脚本语言的桥梁~比如CocoaRuby,和PyObjeC
既然是Python , 那么自然就是介绍PyObjC~它的应用非常灵活,你可以用纯Python写一个独立的应用程序并用Py2App打包给用户
也可以在Objective-C语言中潜入Python代码~~在网上还找到一个实例,在一个程序中,同时应用了Python /  Ruby 和Objective-C
但PyObjC糟糕的文档,和许久没有更新的例子给了我大量的误导,浪费了很多时间,不过在这段时间里,我学习了Objective-C , 加深了对Cocoa框架的理解~

(未完)]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://kebot.me/</uri>
    </author>
    <title type="html"><![CDATA[PHP5.3中覆盖静态类中的方法]]></title>
    <link rel="alternate" type="text/html" href="http://kebot.me/2011/01/php5-3%e4%b8%ad%e8%a6%86%e7%9b%96%e9%9d%99%e6%80%81%e7%b1%bb%e4%b8%ad%e7%9a%84%e6%96%b9%e6%b3%95/" />
    <id>http://kebot.me/2011/01/php5-3%e4%b8%ad%e8%a6%86%e7%9b%96%e9%9d%99%e6%80%81%e7%b1%bb%e4%b8%ad%e7%9a%84%e6%96%b9%e6%b3%95/</id>
    <updated>2011-01-19T00:30:28Z</updated>
    <published>2011-01-19T00:30:28Z</published>
    <category scheme="http://kebot.me/" term="PHP" />
    <summary type="html"><![CDATA[PHP5.3中覆盖静态类中的方法]]></summary>
    <content type="html" xml:base="http://kebot.me/2011/01/php5-3%e4%b8%ad%e8%a6%86%e7%9b%96%e9%9d%99%e6%80%81%e7%b1%bb%e4%b8%ad%e7%9a%84%e6%96%b9%e6%b3%95/"><![CDATA[
经常遇到这样的情况,想改变库中的一个静态方法,然后让继承过来的其它方法也是调用子类中新的方法...

比如父类中有format 和 do两个方法,子类中覆盖了父类的format方法,然后do中调用format方法,会遇到什么情况呢?
<pre lang="PHP"><!--?php
class Book {
  public static format()
  {
    print 'This is format called from Book';
  }

  public static do()
  {
    self::format();
    static::format();
  }
}

class E_Book extends Book {
  public static format()
  {
    print 'This is format called from E_Book'
  }
}

E_Book::do();
?--></pre>
运行的结果是:

self::format()的结果是:'This is format called from Book'

static::format()的结果是:'This is format called from E_Book'

这里运用的是PHP语言里的后期静态绑定,详细见:

http://www.php.net/manual/zh/language.oop5.late-static-bindings.php]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://kebot.me/</uri>
    </author>
    <title type="html"><![CDATA[ D2前端技术论坛]]></title>
    <link rel="alternate" type="text/html" href="http://kebot.me/2010/12/d2%e5%89%8d%e7%ab%af%e6%8a%80%e6%9c%af%e8%ae%ba%e5%9d%9b/" />
    <id>http://kebot.me/2010/12/d2%e5%89%8d%e7%ab%af%e6%8a%80%e6%9c%af%e8%ae%ba%e5%9d%9b/</id>
    <updated>2010-12-18T21:55:12Z</updated>
    <published>2010-12-18T21:55:12Z</published>
    <category scheme="http://kebot.me/" term="Others" />
    <summary type="html"><![CDATA[ D2前端技术论坛]]></summary>
    <content type="html" xml:base="http://kebot.me/2010/12/d2%e5%89%8d%e7%ab%af%e6%8a%80%e6%9c%af%e8%ae%ba%e5%9d%9b/"><![CDATA[
================

D2 简介
------------------
D2 前端技术论坛(Designer &amp; Developer Front End Technology Froum),简称D2 .[Link](http://www.d2forum.org/)
为国内前端开发这和网站设计师提供一个交流的机会,一起分享技术的了去,探讨行业的发展,以技术会友.它是中国所有前端开发者的节日,包括前端设计师,前端开发工程师,和所有对前端技术感兴趣的人. D2将努力营造一种轻松自由的交流氛围,没有任何商业色彩,以纯粹的技术交流为根本,共同推动国内前端技术的发展,促进国内行业标准跟国内融合,发掘前端技术可以创造的更大价值.

D2 是由淘宝网发起,每界由D2前端技术论坛组为组织,不同公司轮流承办.

* 第一届 D2 淘宝网举办
* 第二届 D2 中国雅虎举办
* 第三届 D2 土豆网举办
* 第四届 D2 阿里巴巴举办
* 第五届 D2 淘宝网举办

前面
-------------------
这届的 D2 是 [xufan6](http://twitter.com/xufan6 "Xufan6") 介绍我去的 , 我们同时以学生名义申请参加了D2
在六四考试期间,我想大部分学生都去参加六四考试了,Xufan6同学也是,于是我就拉上了[zcc](http://orzcc.com/)同学一起.

笔记
-------------------

### AM ###
上午基本以聊天为主,我基本上是边听他们扯淡,边和@zcc商量什么时候回去吃嫂子烧的中饭...

#### 什么是前端? ####
其实这个问题真的很难定义,
前端就是把枯燥的数据用优雅的方式展现出来,

#### IE6 ####
豆瓣说他们的用户使用Chrome的已经占到20%,整个IE系列的占有率大概是40%,豆瓣还说他们在隐形地抵抗IE6,IE和其他浏览器浏览豆瓣会有较大的差别...
Hedger：我很好奇，在中国有那么多的杀毒软件公司，可是为什么没有一家公司会提示用户，你的IE6浏览器需要升级。

### PM ###
前后端分离:
Yahoo!的前后端分离采用的是Maple System + PHP
淘宝旺铺:
新旺铺对于前端开发者来说更占优势，需要具备更多的前端知识，提高了门槛同时提供了机遇
EasyCS,基于Java + freemarker完成

### CommonJS时代的JS模块和编译工具 ###

我主要是在三楼的报告厅听的讲座:

### Google的closure compiler ###
问题,面向对象的javascript
1. Class(创建而不是调用)
2. 缺乏似有属性,利用闭包创建私有属性
3. package 需要在可维护性和浏览器寻找多层次对象所耗费的性能之间权衡

Closure Compiler 在压缩代码的时候会过滤js错误,而且这种错误不仅是js编译和运行时的错误,而且在使用面向对象的写法的时候,cc会按照一些注释约定检查错误. 例如@constructor @private 等注释...
closur compiler不仅是一个压缩器，而且是一个编译器，一个加强版的额编译器，可以规范面向对象的开发过程。

cc在编译的时候会去掉对用户来说没有意义的代码，例如a继承自b，如果b只是被a继承，cc会把b去掉，然后将属性和方法直接写入a中

平常为了书写严格的面向对象的js，需要做很多错误的处理，但是如果将这些工作交给cc编译器来处理，那我们可以节省性能和代码，而且更加规范，例如在cc中有泛型的类型检查的概念，利用这个特性，可以将静态语言的特性完美糅合到js中

hedger最后做了总结，cc编译器让我们在写js的时候应该考虑更多的静态问题，编译器通过jsdoc注释让js完全变成了一个标准的静态语言。

### 淘宝的Kissy 框架 ###

### 作品秀:###
[跨浏览器的 JavaScript 调试](http://code.google.com/p/jsdt/)

随意编辑页面样式的Visual Firebug。

各种PPT下载

http://code.google.com/p/xunuo/]]></content>
  </entry>
</feed>
